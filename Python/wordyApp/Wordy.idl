module wordyApp {

    // OBJECTS
   struct Player {
   	    string username;
   	    string password;
    	boolean loggedIn;
    	boolean isInGame;
    	long roundsWon;
   };

   typedef sequence<Player> PlayerList;

   struct Word {
        string wordPrompt;
        Player wordOwner;
   };

  typedef sequence<Word> WordList;

   struct RoomGame {
        string gameRoomID;
        string gameState; //pending, inGame, finishing
        string roomRLetters;
        string winner;
        PlayerList players;
        WordList submittedWords;
   };

   struct LeaderBoard {
        long rank;
        string playerName;
        long numberOfWins;
   };

   struct LongestWordWinner {
        long wordLength;
        string playerName;
        string longestWord;
   };

    // EXCEPTIONS
   exception AlreadyLoggedIn {
   	    string message;
   };

   exception IncorrectCredentials {
   	    string message;
   };

   exception InvalidWord {
   	    string message;
   };

   exception NoPlayerJoined {
   	    string message;
   };

   exception RoundEnd {
        string message;
   };

   exception NotPartOf17Letters {
        string message;
   };

   exception Exceed10Secs {
        string message;
   };

    exception UserNotFound {
        string message;
    };

    exception ExecutionException {
        string message;
    };

    exception NoWinner {
        string message;
    };

    exception TieResult {
        string message;
    };

    // SERVER TO CLIENT METHODS
	interface Wordy {

	        /* Client login */
            Player login(in string username, in string password) raises (IncorrectCredentials, AlreadyLoggedIn);

            /* Displays leading players */
    		typedef sequence<LeaderBoard> hallOfFame;
    		hallOfFame showLeaderBoard();

            /* Displays top 5 longest words*/
    		typedef sequence<LongestWordWinner> longestWinner;
    		longestWinner top5longestWords();

            /* Creates room/s for players */
            RoomGame play(in Player playerInstance) raises (NoPlayerJoined);

            /* Handles next round*/
            RoomGame nextRoundHandler(in RoomGame roomToPrepare);

            /* Waits for players in the room */
            void startTenSecondTimer(in long milliseconds);

            /* Create timer for the round/s */
            void startRoundTimer(in RoomGame game, in long seconds);

            /* Create timer for in between break of rounds */
            void startBreakTimer(in RoomGame game);

            /* Retrieves timer for the round */
            long long getRoundTimer(in string roomRoundID);

            /* Retrieves timer for the in between break */
            long long getBreakTimer(in string roomBreakID);

            /* Calculates the remaining time left */
            long long calculateTimeLeft(in long long startTime, in long long endTime);

            /* Retrieves time left of the timer */
            long long getTimeLeft();

            /* Generates the 17 random letters */
    		void setRandomLetters(in RoomGame roomToSetRLetters);

            /* Retrieves 17 random letters to client */
    		string getRoomRandomLetters(in string roomIDToGetRLetters);

            /* Validates user's entered word */
            boolean userEnteredWord(in string userWord, in Player playerInstance, in RoomGame playerCurrentRoom);

            /* Checks for the specific round winner */
    		Player roundWinnerChecker(in RoomGame room) raises (NoWinner, TieResult);

    		/* Checks for the game win state */
    		boolean gameWinStateChecker(in RoomGame room);

    		/* Retrieves game winner */
    		Player getGameWinner(in RoomGame room);

    		/* Handles game completion */
    		void finishGame(in RoomGame room);

    		/* Client logout */
    		void logOffUser(in string username) raises (UserNotFound);

    };

};






