package wordyApp;


/**
* wordyApp/_WordyStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Wordy.idl
* Friday, July 7, 2023 7:38:10 PM SGT
*/


// SERVER TO CLIENT METHODS
public class _WordyStub extends org.omg.CORBA.portable.ObjectImpl implements wordyApp.Wordy
{


  /* Client login */
  public wordyApp.Player login (String username, String password) throws wordyApp.IncorrectCredentials, wordyApp.AlreadyLoggedIn
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("login", true);
                $out.write_string (username);
                $out.write_string (password);
                $in = _invoke ($out);
                wordyApp.Player $result = wordyApp.PlayerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:wordyApp/IncorrectCredentials:1.0"))
                    throw wordyApp.IncorrectCredentialsHelper.read ($in);
                else if (_id.equals ("IDL:wordyApp/AlreadyLoggedIn:1.0"))
                    throw wordyApp.AlreadyLoggedInHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return login (username, password        );
            } finally {
                _releaseReply ($in);
            }
  } // login

  public wordyApp.LeaderBoard[] showLeaderBoard ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("showLeaderBoard", true);
                $in = _invoke ($out);
                wordyApp.LeaderBoard $result[] = wordyApp.WordyPackage.hallOfFameHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return showLeaderBoard (        );
            } finally {
                _releaseReply ($in);
            }
  } // showLeaderBoard

  public wordyApp.LongestWordWinner[] top5longestWords ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("top5longestWords", true);
                $in = _invoke ($out);
                wordyApp.LongestWordWinner $result[] = wordyApp.WordyPackage.longestWinnerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return top5longestWords (        );
            } finally {
                _releaseReply ($in);
            }
  } // top5longestWords


  /* Creates room/s for players */
  public wordyApp.RoomGame play (wordyApp.Player playerInstance) throws wordyApp.NoPlayerJoined
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("play", true);
                wordyApp.PlayerHelper.write ($out, playerInstance);
                $in = _invoke ($out);
                wordyApp.RoomGame $result = wordyApp.RoomGameHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:wordyApp/NoPlayerJoined:1.0"))
                    throw wordyApp.NoPlayerJoinedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return play (playerInstance        );
            } finally {
                _releaseReply ($in);
            }
  } // play


  /* Handles next round*/
  public wordyApp.RoomGame nextRoundHandler (wordyApp.RoomGame roomToPrepare)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("nextRoundHandler", true);
                wordyApp.RoomGameHelper.write ($out, roomToPrepare);
                $in = _invoke ($out);
                wordyApp.RoomGame $result = wordyApp.RoomGameHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return nextRoundHandler (roomToPrepare        );
            } finally {
                _releaseReply ($in);
            }
  } // nextRoundHandler


  /* Waits for players in the room */
  public void startTenSecondTimer (int milliseconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startTenSecondTimer", true);
                $out.write_long (milliseconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startTenSecondTimer (milliseconds        );
            } finally {
                _releaseReply ($in);
            }
  } // startTenSecondTimer


  /* Create timer for the round/s */
  public void startRoundTimer (wordyApp.RoomGame game, int seconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startRoundTimer", true);
                wordyApp.RoomGameHelper.write ($out, game);
                $out.write_long (seconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startRoundTimer (game, seconds        );
            } finally {
                _releaseReply ($in);
            }
  } // startRoundTimer


  /* Create timer for in between break of rounds */
  public void startBreakTimer (wordyApp.RoomGame game)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startBreakTimer", true);
                wordyApp.RoomGameHelper.write ($out, game);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startBreakTimer (game        );
            } finally {
                _releaseReply ($in);
            }
  } // startBreakTimer


  /* Retrieves timer for the round */
  public long getRoundTimer (String roomRoundID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRoundTimer", true);
                $out.write_string (roomRoundID);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getRoundTimer (roomRoundID        );
            } finally {
                _releaseReply ($in);
            }
  } // getRoundTimer


  /* Retrieves timer for the in between break */
  public long getBreakTimer (String roomBreakID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getBreakTimer", true);
                $out.write_string (roomBreakID);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getBreakTimer (roomBreakID        );
            } finally {
                _releaseReply ($in);
            }
  } // getBreakTimer

  public void addRoom (String roomIDForRoomAdd, wordyApp.RoomGame roomForAddRoom)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addRoom", true);
                $out.write_string (roomIDForRoomAdd);
                wordyApp.RoomGameHelper.write ($out, roomForAddRoom);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                addRoom (roomIDForRoomAdd, roomForAddRoom        );
            } finally {
                _releaseReply ($in);
            }
  } // addRoom

  public void decreasePlayerCount (String roomNumberToDecreasePlayer)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("decreasePlayerCount", true);
                $out.write_string (roomNumberToDecreasePlayer);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                decreasePlayerCount (roomNumberToDecreasePlayer        );
            } finally {
                _releaseReply ($in);
            }
  } // decreasePlayerCount

  public void deleteRoom (String roomNumberToDelete)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteRoom", true);
                $out.write_string (roomNumberToDelete);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteRoom (roomNumberToDelete        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteRoom

  public void updatePlayerIsInGame (String usernamePlayer, boolean isPlayerInGame)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updatePlayerIsInGame", true);
                $out.write_string (usernamePlayer);
                $out.write_boolean (isPlayerInGame);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updatePlayerIsInGame (usernamePlayer, isPlayerInGame        );
            } finally {
                _releaseReply ($in);
            }
  } // updatePlayerIsInGame

  public void updateResult (String roomgameID, String winner, int roundnumber)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateResult", true);
                $out.write_string (roomgameID);
                $out.write_string (winner);
                $out.write_long (roundnumber);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateResult (roomgameID, winner, roundnumber        );
            } finally {
                _releaseReply ($in);
            }
  } // updateResult

  public String getWinner (String roomgameID, int roundnumber)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getWinner", true);
                $out.write_string (roomgameID);
                $out.write_long (roundnumber);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getWinner (roomgameID, roundnumber        );
            } finally {
                _releaseReply ($in);
            }
  } // getWinner

  public int getPlayerCount (String roomIDForPlayerCount)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPlayerCount", true);
                $out.write_string (roomIDForPlayerCount);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPlayerCount (roomIDForPlayerCount        );
            } finally {
                _releaseReply ($in);
            }
  } // getPlayerCount


  /* Calculates the remaining time left */
  public long calculateTimeLeft (long startTime, long endTime)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("calculateTimeLeft", true);
                $out.write_longlong (startTime);
                $out.write_longlong (endTime);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return calculateTimeLeft (startTime, endTime        );
            } finally {
                _releaseReply ($in);
            }
  } // calculateTimeLeft


  /* Retrieves time left of the timer */
  public long getTimeLeft ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTimeLeft", true);
                $in = _invoke ($out);
                long $result = $in.read_longlong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTimeLeft (        );
            } finally {
                _releaseReply ($in);
            }
  } // getTimeLeft


  /* Generates the 17 random letters */
  public void setRandomLetters (wordyApp.RoomGame roomToSetRLetters)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setRandomLetters", true);
                wordyApp.RoomGameHelper.write ($out, roomToSetRLetters);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setRandomLetters (roomToSetRLetters        );
            } finally {
                _releaseReply ($in);
            }
  } // setRandomLetters


  /* Retrieves 17 random letters to client */
  public String getRoomRandomLetters (String roomIDToGetRLetters)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRoomRandomLetters", true);
                $out.write_string (roomIDToGetRLetters);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getRoomRandomLetters (roomIDToGetRLetters        );
            } finally {
                _releaseReply ($in);
            }
  } // getRoomRandomLetters


  /* Validates user's entered word */
  public boolean userEnteredWord (String userWord, wordyApp.Player playerInstance, wordyApp.RoomGame playerCurrentRoom)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("userEnteredWord", true);
                $out.write_string (userWord);
                wordyApp.PlayerHelper.write ($out, playerInstance);
                wordyApp.RoomGameHelper.write ($out, playerCurrentRoom);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return userEnteredWord (userWord, playerInstance, playerCurrentRoom        );
            } finally {
                _releaseReply ($in);
            }
  } // userEnteredWord


  /* Checks for the specific round winner */
  public wordyApp.Player roundWinnerChecker (wordyApp.RoomGame room) throws wordyApp.NoWinner, wordyApp.TieResult
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("roundWinnerChecker", true);
                wordyApp.RoomGameHelper.write ($out, room);
                $in = _invoke ($out);
                wordyApp.Player $result = wordyApp.PlayerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:wordyApp/NoWinner:1.0"))
                    throw wordyApp.NoWinnerHelper.read ($in);
                else if (_id.equals ("IDL:wordyApp/TieResult:1.0"))
                    throw wordyApp.TieResultHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return roundWinnerChecker (room        );
            } finally {
                _releaseReply ($in);
            }
  } // roundWinnerChecker


  /* Checks for the game win state */
  public boolean gameWinStateChecker (wordyApp.RoomGame room)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("gameWinStateChecker", true);
                wordyApp.RoomGameHelper.write ($out, room);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return gameWinStateChecker (room        );
            } finally {
                _releaseReply ($in);
            }
  } // gameWinStateChecker


  /* Retrieves game winner */
  public wordyApp.Player getGameWinner (wordyApp.RoomGame room)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getGameWinner", true);
                wordyApp.RoomGameHelper.write ($out, room);
                $in = _invoke ($out);
                wordyApp.Player $result = wordyApp.PlayerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getGameWinner (room        );
            } finally {
                _releaseReply ($in);
            }
  } // getGameWinner


  /* Handles game completion */
  public void finishGame (wordyApp.Player playerID, wordyApp.RoomGame room)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("finishGame", true);
                wordyApp.PlayerHelper.write ($out, playerID);
                wordyApp.RoomGameHelper.write ($out, room);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                finishGame (playerID, room        );
            } finally {
                _releaseReply ($in);
            }
  } // finishGame


  /* Client logout */
  public void logOffUser (String username) throws wordyApp.UserNotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("logOffUser", true);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:wordyApp/UserNotFound:1.0"))
                    throw wordyApp.UserNotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                logOffUser (username        );
            } finally {
                _releaseReply ($in);
            }
  } // logOffUser

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:wordyApp/Wordy:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _WordyStub
